// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: resourcex.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourcexHealthCheckResponse_ServiceStatus int32

const (
	ResourcexHealthCheckResponse_UNKNOWN         ResourcexHealthCheckResponse_ServiceStatus = 0
	ResourcexHealthCheckResponse_SERVING         ResourcexHealthCheckResponse_ServiceStatus = 1
	ResourcexHealthCheckResponse_NOT_SERVING     ResourcexHealthCheckResponse_ServiceStatus = 2
	ResourcexHealthCheckResponse_SERVICE_UNKNOWN ResourcexHealthCheckResponse_ServiceStatus = 3
)

// Enum value maps for ResourcexHealthCheckResponse_ServiceStatus.
var (
	ResourcexHealthCheckResponse_ServiceStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	ResourcexHealthCheckResponse_ServiceStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x ResourcexHealthCheckResponse_ServiceStatus) Enum() *ResourcexHealthCheckResponse_ServiceStatus {
	p := new(ResourcexHealthCheckResponse_ServiceStatus)
	*p = x
	return p
}

func (x ResourcexHealthCheckResponse_ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourcexHealthCheckResponse_ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_resourcex_proto_enumTypes[0].Descriptor()
}

func (ResourcexHealthCheckResponse_ServiceStatus) Type() protoreflect.EnumType {
	return &file_resourcex_proto_enumTypes[0]
}

func (x ResourcexHealthCheckResponse_ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourcexHealthCheckResponse_ServiceStatus.Descriptor instead.
func (ResourcexHealthCheckResponse_ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{2, 0}
}

type StaticWebsiteHealthCheckResponse_ServiceStatus int32

const (
	StaticWebsiteHealthCheckResponse_UNKNOWN         StaticWebsiteHealthCheckResponse_ServiceStatus = 0
	StaticWebsiteHealthCheckResponse_SERVING         StaticWebsiteHealthCheckResponse_ServiceStatus = 1
	StaticWebsiteHealthCheckResponse_NOT_SERVING     StaticWebsiteHealthCheckResponse_ServiceStatus = 2
	StaticWebsiteHealthCheckResponse_SERVICE_UNKNOWN StaticWebsiteHealthCheckResponse_ServiceStatus = 3
)

// Enum value maps for StaticWebsiteHealthCheckResponse_ServiceStatus.
var (
	StaticWebsiteHealthCheckResponse_ServiceStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	StaticWebsiteHealthCheckResponse_ServiceStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x StaticWebsiteHealthCheckResponse_ServiceStatus) Enum() *StaticWebsiteHealthCheckResponse_ServiceStatus {
	p := new(StaticWebsiteHealthCheckResponse_ServiceStatus)
	*p = x
	return p
}

func (x StaticWebsiteHealthCheckResponse_ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticWebsiteHealthCheckResponse_ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_resourcex_proto_enumTypes[1].Descriptor()
}

func (StaticWebsiteHealthCheckResponse_ServiceStatus) Type() protoreflect.EnumType {
	return &file_resourcex_proto_enumTypes[1]
}

func (x StaticWebsiteHealthCheckResponse_ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticWebsiteHealthCheckResponse_ServiceStatus.Descriptor instead.
func (StaticWebsiteHealthCheckResponse_ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{12, 0}
}

type ResourcexBaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResourcexBaseResponse) Reset() {
	*x = ResourcexBaseResponse{}
	mi := &file_resourcex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexBaseResponse) ProtoMessage() {}

func (x *ResourcexBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexBaseResponse.ProtoReflect.Descriptor instead.
func (*ResourcexBaseResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{0}
}

func (x *ResourcexBaseResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResourcexBaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResourcexHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ResourcexHealthCheckRequest) Reset() {
	*x = ResourcexHealthCheckRequest{}
	mi := &file_resourcex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexHealthCheckRequest) ProtoMessage() {}

func (x *ResourcexHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*ResourcexHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{1}
}

func (x *ResourcexHealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ResourcexHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ResourcexHealthCheckResponse_ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=nix.ResourcexHealthCheckResponse_ServiceStatus" json:"status,omitempty"`
}

func (x *ResourcexHealthCheckResponse) Reset() {
	*x = ResourcexHealthCheckResponse{}
	mi := &file_resourcex_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexHealthCheckResponse) ProtoMessage() {}

func (x *ResourcexHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*ResourcexHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{2}
}

func (x *ResourcexHealthCheckResponse) GetStatus() ResourcexHealthCheckResponse_ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ResourcexHealthCheckResponse_UNKNOWN
}

type ResourcexUploadFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Chunk:
	//
	//	*ResourcexUploadFileChunk_Metadata
	//	*ResourcexUploadFileChunk_Data
	Chunk isResourcexUploadFileChunk_Chunk `protobuf_oneof:"chunk"`
}

func (x *ResourcexUploadFileChunk) Reset() {
	*x = ResourcexUploadFileChunk{}
	mi := &file_resourcex_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexUploadFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexUploadFileChunk) ProtoMessage() {}

func (x *ResourcexUploadFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexUploadFileChunk.ProtoReflect.Descriptor instead.
func (*ResourcexUploadFileChunk) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{3}
}

func (m *ResourcexUploadFileChunk) GetChunk() isResourcexUploadFileChunk_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (x *ResourcexUploadFileChunk) GetMetadata() *ResourcexUploadFileMetadata {
	if x, ok := x.GetChunk().(*ResourcexUploadFileChunk_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *ResourcexUploadFileChunk) GetData() []byte {
	if x, ok := x.GetChunk().(*ResourcexUploadFileChunk_Data); ok {
		return x.Data
	}
	return nil
}

type isResourcexUploadFileChunk_Chunk interface {
	isResourcexUploadFileChunk_Chunk()
}

type ResourcexUploadFileChunk_Metadata struct {
	// 文件元数据（文件名、MD5等）
	Metadata *ResourcexUploadFileMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type ResourcexUploadFileChunk_Data struct {
	// 文件数据块
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*ResourcexUploadFileChunk_Metadata) isResourcexUploadFileChunk_Chunk() {}

func (*ResourcexUploadFileChunk_Data) isResourcexUploadFileChunk_Chunk() {}

type ResourcexUploadFileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端请求id,客户端自行保证其唯一
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// 发送此文件的app
	App string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	// 此文件的标签，通常用于区分业务
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// 租户id
	TenantId string `protobuf:"bytes,4,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// 所对应的空间id
	SpaceObjectId string `protobuf:"bytes,5,opt,name=spaceObjectId,proto3" json:"spaceObjectId,omitempty"`
	// 指定存储到服务器中的文件路径
	FullFilePath string `protobuf:"bytes,6,opt,name=fullFilePath,proto3" json:"fullFilePath,omitempty"`
	// 文件名
	FileName string `protobuf:"bytes,7,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// 上传文件的用户id
	UserId string `protobuf:"bytes,8,opt,name=userId,proto3" json:"userId,omitempty"`
	// 文件的MD5哈希值
	FileMd5 string `protobuf:"bytes,9,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	// 文件大小
	FileSize int64 `protobuf:"varint,10,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	// 文件内容类型
	ContentType string `protobuf:"bytes,11,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// 文件描述
	Description *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// 下载时服务器给的文件名
	DownloadFileName *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=downloadFileName,proto3" json:"downloadFileName,omitempty"`
}

func (x *ResourcexUploadFileMetadata) Reset() {
	*x = ResourcexUploadFileMetadata{}
	mi := &file_resourcex_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexUploadFileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexUploadFileMetadata) ProtoMessage() {}

func (x *ResourcexUploadFileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexUploadFileMetadata.ProtoReflect.Descriptor instead.
func (*ResourcexUploadFileMetadata) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{4}
}

func (x *ResourcexUploadFileMetadata) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetSpaceObjectId() string {
	if x != nil {
		return x.SpaceObjectId
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetFullFilePath() string {
	if x != nil {
		return x.FullFilePath
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ResourcexUploadFileMetadata) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ResourcexUploadFileMetadata) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ResourcexUploadFileMetadata) GetDownloadFileName() *wrapperspb.StringValue {
	if x != nil {
		return x.DownloadFileName
	}
	return nil
}

type ResourcexUploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 如果失败，则返回失败结果
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 返回客户端请求时的id
	RequestId string `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// 文件对象id
	FileObjectId string `protobuf:"bytes,4,opt,name=fileObjectId,proto3" json:"fileObjectId,omitempty"`
	// 资源名称
	ResourceName string `protobuf:"bytes,5,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	// 文件名
	FileName string `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// 文件下载url
	DownloadUrl      string `protobuf:"bytes,7,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
	DownloadFileName string `protobuf:"bytes,8,opt,name=downloadFileName,proto3" json:"downloadFileName,omitempty"`
}

func (x *ResourcexUploadFileResponse) Reset() {
	*x = ResourcexUploadFileResponse{}
	mi := &file_resourcex_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexUploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexUploadFileResponse) ProtoMessage() {}

func (x *ResourcexUploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexUploadFileResponse.ProtoReflect.Descriptor instead.
func (*ResourcexUploadFileResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{5}
}

func (x *ResourcexUploadFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResourcexUploadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResourcexUploadFileResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ResourcexUploadFileResponse) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

func (x *ResourcexUploadFileResponse) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ResourcexUploadFileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ResourcexUploadFileResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *ResourcexUploadFileResponse) GetDownloadFileName() string {
	if x != nil {
		return x.DownloadFileName
	}
	return ""
}

type ResourcexGetContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文件objectId
	FileObjectId string `protobuf:"bytes,1,opt,name=fileObjectId,proto3" json:"fileObjectId,omitempty"`
}

func (x *ResourcexGetContentRequest) Reset() {
	*x = ResourcexGetContentRequest{}
	mi := &file_resourcex_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexGetContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexGetContentRequest) ProtoMessage() {}

func (x *ResourcexGetContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexGetContentRequest.ProtoReflect.Descriptor instead.
func (*ResourcexGetContentRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{6}
}

func (x *ResourcexGetContentRequest) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

type ResourcexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileObjectId string `protobuf:"bytes,1,opt,name=FileObjectId,proto3" json:"FileObjectId,omitempty"`
	// 文件所属空间id
	SpaceObjectId string `protobuf:"bytes,2,opt,name=spaceObjectId,proto3" json:"spaceObjectId,omitempty"`
	// 文件tag
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// 文件所属文件夹
	Folder string `protobuf:"bytes,4,opt,name=folder,proto3" json:"folder,omitempty"`
	// 资源名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 文件名
	FileName string `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// 文件内容的md4
	Md5 string `protobuf:"bytes,7,opt,name=md5,proto3" json:"md5,omitempty"`
	// 文件大小
	Size int64 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	// 文件类型
	FileType string `protobuf:"bytes,9,opt,name=fileType,proto3" json:"fileType,omitempty"`
	// mime类型
	MimeType string `protobuf:"bytes,10,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
	// 文件描述
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// 预览url
	PreviewUrl string `protobuf:"bytes,12,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	// 下载url
	DownloadUrl string `protobuf:"bytes,13,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
}

func (x *ResourcexInfo) Reset() {
	*x = ResourcexInfo{}
	mi := &file_resourcex_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexInfo) ProtoMessage() {}

func (x *ResourcexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexInfo.ProtoReflect.Descriptor instead.
func (*ResourcexInfo) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{7}
}

func (x *ResourcexInfo) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

func (x *ResourcexInfo) GetSpaceObjectId() string {
	if x != nil {
		return x.SpaceObjectId
	}
	return ""
}

func (x *ResourcexInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ResourcexInfo) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *ResourcexInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourcexInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ResourcexInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *ResourcexInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResourcexInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *ResourcexInfo) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ResourcexInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourcexInfo) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *ResourcexInfo) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

type ResourcexGetContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 如果失败，则返回失败结果
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 要获取的文件objectId
	FileObjectId string `protobuf:"bytes,3,opt,name=fileObjectId,proto3" json:"fileObjectId,omitempty"`
	// 文件信息
	Info *ResourcexInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	// 文件内容
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ResourcexGetContentResponse) Reset() {
	*x = ResourcexGetContentResponse{}
	mi := &file_resourcex_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexGetContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexGetContentResponse) ProtoMessage() {}

func (x *ResourcexGetContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexGetContentResponse.ProtoReflect.Descriptor instead.
func (*ResourcexGetContentResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{8}
}

func (x *ResourcexGetContentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResourcexGetContentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResourcexGetContentResponse) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

func (x *ResourcexGetContentResponse) GetInfo() *ResourcexInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ResourcexGetContentResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type ResourcexGetContentStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文件objectId
	FileObjectId string `protobuf:"bytes,1,opt,name=fileObjectId,proto3" json:"fileObjectId,omitempty"`
}

func (x *ResourcexGetContentStreamRequest) Reset() {
	*x = ResourcexGetContentStreamRequest{}
	mi := &file_resourcex_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexGetContentStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexGetContentStreamRequest) ProtoMessage() {}

func (x *ResourcexGetContentStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexGetContentStreamRequest.ProtoReflect.Descriptor instead.
func (*ResourcexGetContentStreamRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{9}
}

func (x *ResourcexGetContentStreamRequest) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

type ResourcexGetContentStreamChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 如果失败，则返回失败结果
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 要获取的文件objectId
	FileObjectId string `protobuf:"bytes,3,opt,name=fileObjectId,proto3" json:"fileObjectId,omitempty"`
	// 文件信息
	Info *ResourcexInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	// 文件内容
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ResourcexGetContentStreamChunk) Reset() {
	*x = ResourcexGetContentStreamChunk{}
	mi := &file_resourcex_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcexGetContentStreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcexGetContentStreamChunk) ProtoMessage() {}

func (x *ResourcexGetContentStreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcexGetContentStreamChunk.ProtoReflect.Descriptor instead.
func (*ResourcexGetContentStreamChunk) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{10}
}

func (x *ResourcexGetContentStreamChunk) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResourcexGetContentStreamChunk) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResourcexGetContentStreamChunk) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

func (x *ResourcexGetContentStreamChunk) GetInfo() *ResourcexInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ResourcexGetContentStreamChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type StaticWebsiteHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *StaticWebsiteHealthCheckRequest) Reset() {
	*x = StaticWebsiteHealthCheckRequest{}
	mi := &file_resourcex_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteHealthCheckRequest) ProtoMessage() {}

func (x *StaticWebsiteHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*StaticWebsiteHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{11}
}

func (x *StaticWebsiteHealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type StaticWebsiteHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StaticWebsiteHealthCheckResponse_ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=nix.StaticWebsiteHealthCheckResponse_ServiceStatus" json:"status,omitempty"`
}

func (x *StaticWebsiteHealthCheckResponse) Reset() {
	*x = StaticWebsiteHealthCheckResponse{}
	mi := &file_resourcex_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteHealthCheckResponse) ProtoMessage() {}

func (x *StaticWebsiteHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*StaticWebsiteHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{12}
}

func (x *StaticWebsiteHealthCheckResponse) GetStatus() StaticWebsiteHealthCheckResponse_ServiceStatus {
	if x != nil {
		return x.Status
	}
	return StaticWebsiteHealthCheckResponse_UNKNOWN
}

type StaticWebsitePageListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 要搜索的子文件夹中的文件
	SubFolderList []string `protobuf:"bytes,2,rep,name=subFolderList,proto3" json:"subFolderList,omitempty"`
}

func (x *StaticWebsitePageListRequest) Reset() {
	*x = StaticWebsitePageListRequest{}
	mi := &file_resourcex_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsitePageListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsitePageListRequest) ProtoMessage() {}

func (x *StaticWebsitePageListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsitePageListRequest.ProtoReflect.Descriptor instead.
func (*StaticWebsitePageListRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{13}
}

func (x *StaticWebsitePageListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StaticWebsitePageListRequest) GetSubFolderList() []string {
	if x != nil {
		return x.SubFolderList
	}
	return nil
}

// 静态站点信息
type StaticWebsiteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceObjectId string `protobuf:"bytes,1,opt,name=spaceObjectId,proto3" json:"spaceObjectId,omitempty"`
	SpaceName     string `protobuf:"bytes,2,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	// 名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 显示名称
	DisplayName    string `protobuf:"bytes,4,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description    string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	WebsiteRootUrl string `protobuf:"bytes,6,opt,name=websiteRootUrl,proto3" json:"websiteRootUrl,omitempty"`
}

func (x *StaticWebsiteInfo) Reset() {
	*x = StaticWebsiteInfo{}
	mi := &file_resourcex_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteInfo) ProtoMessage() {}

func (x *StaticWebsiteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteInfo.ProtoReflect.Descriptor instead.
func (*StaticWebsiteInfo) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{14}
}

func (x *StaticWebsiteInfo) GetSpaceObjectId() string {
	if x != nil {
		return x.SpaceObjectId
	}
	return ""
}

func (x *StaticWebsiteInfo) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *StaticWebsiteInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StaticWebsiteInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StaticWebsiteInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StaticWebsiteInfo) GetWebsiteRootUrl() string {
	if x != nil {
		return x.WebsiteRootUrl
	}
	return ""
}

type StaticWebsitePageListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebsiteInfo *StaticWebsiteInfo `protobuf:"bytes,1,opt,name=websiteInfo,proto3" json:"websiteInfo,omitempty"`
	FileList    []*ResourcexInfo   `protobuf:"bytes,2,rep,name=fileList,proto3" json:"fileList,omitempty"`
}

func (x *StaticWebsitePageListResponse) Reset() {
	*x = StaticWebsitePageListResponse{}
	mi := &file_resourcex_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsitePageListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsitePageListResponse) ProtoMessage() {}

func (x *StaticWebsitePageListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsitePageListResponse.ProtoReflect.Descriptor instead.
func (*StaticWebsitePageListResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{15}
}

func (x *StaticWebsitePageListResponse) GetWebsiteInfo() *StaticWebsiteInfo {
	if x != nil {
		return x.WebsiteInfo
	}
	return nil
}

func (x *StaticWebsitePageListResponse) GetFileList() []*ResourcexInfo {
	if x != nil {
		return x.FileList
	}
	return nil
}

type StaticWebsiteUploadFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Chunk:
	//
	//	*StaticWebsiteUploadFileChunk_Metadata
	//	*StaticWebsiteUploadFileChunk_Data
	Chunk isStaticWebsiteUploadFileChunk_Chunk `protobuf_oneof:"chunk"`
}

func (x *StaticWebsiteUploadFileChunk) Reset() {
	*x = StaticWebsiteUploadFileChunk{}
	mi := &file_resourcex_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteUploadFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteUploadFileChunk) ProtoMessage() {}

func (x *StaticWebsiteUploadFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteUploadFileChunk.ProtoReflect.Descriptor instead.
func (*StaticWebsiteUploadFileChunk) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{16}
}

func (m *StaticWebsiteUploadFileChunk) GetChunk() isStaticWebsiteUploadFileChunk_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (x *StaticWebsiteUploadFileChunk) GetMetadata() *StaticWebsiteUploadFileMetadata {
	if x, ok := x.GetChunk().(*StaticWebsiteUploadFileChunk_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *StaticWebsiteUploadFileChunk) GetData() []byte {
	if x, ok := x.GetChunk().(*StaticWebsiteUploadFileChunk_Data); ok {
		return x.Data
	}
	return nil
}

type isStaticWebsiteUploadFileChunk_Chunk interface {
	isStaticWebsiteUploadFileChunk_Chunk()
}

type StaticWebsiteUploadFileChunk_Metadata struct {
	// 文件元数据（文件名、MD5等）
	Metadata *StaticWebsiteUploadFileMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type StaticWebsiteUploadFileChunk_Data struct {
	// 文件数据块
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*StaticWebsiteUploadFileChunk_Metadata) isStaticWebsiteUploadFileChunk_Chunk() {}

func (*StaticWebsiteUploadFileChunk_Data) isStaticWebsiteUploadFileChunk_Chunk() {}

type StaticWebsiteUploadFileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 客户端请求id,客户端自行保证其唯一
	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// 网站名称
	StaticWebsiteName string `protobuf:"bytes,2,opt,name=staticWebsiteName,proto3" json:"staticWebsiteName,omitempty"`
	// 上传此文件的app
	App string `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// 指定存储到服务器中的文件路径
	FullFilePath string `protobuf:"bytes,4,opt,name=fullFilePath,proto3" json:"fullFilePath,omitempty"`
	// 文件名
	FileName string `protobuf:"bytes,5,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// 上传文件的用户id
	UserId string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	// 文件的MD5哈希值
	FileMd5 string `protobuf:"bytes,7,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
	// 文件大小
	FileSize int64 `protobuf:"varint,8,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	// 文件内容类型,如html,js,css等
	ContentType string `protobuf:"bytes,9,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// 文件描述
	Description *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *StaticWebsiteUploadFileMetadata) Reset() {
	*x = StaticWebsiteUploadFileMetadata{}
	mi := &file_resourcex_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteUploadFileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteUploadFileMetadata) ProtoMessage() {}

func (x *StaticWebsiteUploadFileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteUploadFileMetadata.ProtoReflect.Descriptor instead.
func (*StaticWebsiteUploadFileMetadata) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{17}
}

func (x *StaticWebsiteUploadFileMetadata) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetStaticWebsiteName() string {
	if x != nil {
		return x.StaticWebsiteName
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetFullFilePath() string {
	if x != nil {
		return x.FullFilePath
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *StaticWebsiteUploadFileMetadata) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *StaticWebsiteUploadFileMetadata) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

// 静态站点文件上传结果
type StaticWebsiteUploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否成功
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// 如果失败，则返回失败结果
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 返回客户端请求时的id
	RequestId string `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// 文件对象id
	FileObjectId string `protobuf:"bytes,4,opt,name=fileObjectId,proto3" json:"fileObjectId,omitempty"`
	// 资源名称
	ResourceName string `protobuf:"bytes,5,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	// 文件名
	FileName string `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// 文件下载url
	DownloadUrl string `protobuf:"bytes,7,opt,name=downloadUrl,proto3" json:"downloadUrl,omitempty"`
	// 预览url
	PreviewUrl string `protobuf:"bytes,8,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
}

func (x *StaticWebsiteUploadFileResponse) Reset() {
	*x = StaticWebsiteUploadFileResponse{}
	mi := &file_resourcex_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteUploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteUploadFileResponse) ProtoMessage() {}

func (x *StaticWebsiteUploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteUploadFileResponse.ProtoReflect.Descriptor instead.
func (*StaticWebsiteUploadFileResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{18}
}

func (x *StaticWebsiteUploadFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StaticWebsiteUploadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StaticWebsiteUploadFileResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StaticWebsiteUploadFileResponse) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

func (x *StaticWebsiteUploadFileResponse) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *StaticWebsiteUploadFileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StaticWebsiteUploadFileResponse) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *StaticWebsiteUploadFileResponse) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

type StaticWebsiteDeleteFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 网站名称
	StaticWebsiteName string `protobuf:"bytes,1,opt,name=staticWebsiteName,proto3" json:"staticWebsiteName,omitempty"`
	// 删除的文件objectId
	FileObjectId string `protobuf:"bytes,2,opt,name=FileObjectId,proto3" json:"FileObjectId,omitempty"`
}

func (x *StaticWebsiteDeleteFileRequest) Reset() {
	*x = StaticWebsiteDeleteFileRequest{}
	mi := &file_resourcex_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteDeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteDeleteFileRequest) ProtoMessage() {}

func (x *StaticWebsiteDeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteDeleteFileRequest.ProtoReflect.Descriptor instead.
func (*StaticWebsiteDeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{19}
}

func (x *StaticWebsiteDeleteFileRequest) GetStaticWebsiteName() string {
	if x != nil {
		return x.StaticWebsiteName
	}
	return ""
}

func (x *StaticWebsiteDeleteFileRequest) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

type StaticWebsiteDeleteFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 网站名称
	StaticWebsiteName string `protobuf:"bytes,1,opt,name=staticWebsiteName,proto3" json:"staticWebsiteName,omitempty"`
	// 删除的文件objectId
	FileObjectId string `protobuf:"bytes,2,opt,name=FileObjectId,proto3" json:"FileObjectId,omitempty"`
	// 是否成功
	Success bool `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	// 如果失败，则返回失败的详细信息
	Message string `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *StaticWebsiteDeleteFileResponse) Reset() {
	*x = StaticWebsiteDeleteFileResponse{}
	mi := &file_resourcex_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsiteDeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsiteDeleteFileResponse) ProtoMessage() {}

func (x *StaticWebsiteDeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsiteDeleteFileResponse.ProtoReflect.Descriptor instead.
func (*StaticWebsiteDeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{20}
}

func (x *StaticWebsiteDeleteFileResponse) GetStaticWebsiteName() string {
	if x != nil {
		return x.StaticWebsiteName
	}
	return ""
}

func (x *StaticWebsiteDeleteFileResponse) GetFileObjectId() string {
	if x != nil {
		return x.FileObjectId
	}
	return ""
}

func (x *StaticWebsiteDeleteFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StaticWebsiteDeleteFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StaticWebsitePublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 网站名称
	StaticWebsiteName string `protobuf:"bytes,1,opt,name=staticWebsiteName,proto3" json:"staticWebsiteName,omitempty"`
}

func (x *StaticWebsitePublishRequest) Reset() {
	*x = StaticWebsitePublishRequest{}
	mi := &file_resourcex_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsitePublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsitePublishRequest) ProtoMessage() {}

func (x *StaticWebsitePublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsitePublishRequest.ProtoReflect.Descriptor instead.
func (*StaticWebsitePublishRequest) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{21}
}

func (x *StaticWebsitePublishRequest) GetStaticWebsiteName() string {
	if x != nil {
		return x.StaticWebsiteName
	}
	return ""
}

type StaticWebsitePublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 网站名称
	StaticWebsiteName string `protobuf:"bytes,1,opt,name=staticWebsiteName,proto3" json:"staticWebsiteName,omitempty"`
	// 是否成功
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// 如果失败，则返回失败的详细信息
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *StaticWebsitePublishResponse) Reset() {
	*x = StaticWebsitePublishResponse{}
	mi := &file_resourcex_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticWebsitePublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticWebsitePublishResponse) ProtoMessage() {}

func (x *StaticWebsitePublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resourcex_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticWebsitePublishResponse.ProtoReflect.Descriptor instead.
func (*StaticWebsitePublishResponse) Descriptor() ([]byte, []int) {
	return file_resourcex_proto_rawDescGZIP(), []int{22}
}

func (x *StaticWebsitePublishResponse) GetStaticWebsiteName() string {
	if x != nil {
		return x.StaticWebsiteName
	}
	return ""
}

func (x *StaticWebsitePublishResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StaticWebsitePublishResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_resourcex_proto protoreflect.FileDescriptor

var file_resourcex_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6e, 0x69, 0x78, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x78, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x03, 0x22, 0x79, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xdb, 0x03, 0x0a,
	0x1b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40,
	0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x46, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x1e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x69, 0x78, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x58, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x1d,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x69, 0x78, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x78,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xef, 0x02, 0x0a, 0x1f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02,
	0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x22, 0x72, 0x0a, 0x1e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x01,
	0x0a, 0x1f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x87, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x2e,
	0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x69, 0x78, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x20, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x58, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x69, 0x78,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x78, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30,
	0x01, 0x32, 0x81, 0x04, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x24, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x24, 0x2e, 0x6e, 0x69, 0x78,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x12, 0x64, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e,
	0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x20, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e, 0x69, 0x78, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x62, 0x6d, 0x70, 0x69, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x78, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resourcex_proto_rawDescOnce sync.Once
	file_resourcex_proto_rawDescData = file_resourcex_proto_rawDesc
)

func file_resourcex_proto_rawDescGZIP() []byte {
	file_resourcex_proto_rawDescOnce.Do(func() {
		file_resourcex_proto_rawDescData = protoimpl.X.CompressGZIP(file_resourcex_proto_rawDescData)
	})
	return file_resourcex_proto_rawDescData
}

var file_resourcex_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_resourcex_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_resourcex_proto_goTypes = []any{
	(ResourcexHealthCheckResponse_ServiceStatus)(0),     // 0: nix.ResourcexHealthCheckResponse.ServiceStatus
	(StaticWebsiteHealthCheckResponse_ServiceStatus)(0), // 1: nix.StaticWebsiteHealthCheckResponse.ServiceStatus
	(*ResourcexBaseResponse)(nil),                       // 2: nix.ResourcexBaseResponse
	(*ResourcexHealthCheckRequest)(nil),                 // 3: nix.ResourcexHealthCheckRequest
	(*ResourcexHealthCheckResponse)(nil),                // 4: nix.ResourcexHealthCheckResponse
	(*ResourcexUploadFileChunk)(nil),                    // 5: nix.ResourcexUploadFileChunk
	(*ResourcexUploadFileMetadata)(nil),                 // 6: nix.ResourcexUploadFileMetadata
	(*ResourcexUploadFileResponse)(nil),                 // 7: nix.ResourcexUploadFileResponse
	(*ResourcexGetContentRequest)(nil),                  // 8: nix.ResourcexGetContentRequest
	(*ResourcexInfo)(nil),                               // 9: nix.ResourcexInfo
	(*ResourcexGetContentResponse)(nil),                 // 10: nix.ResourcexGetContentResponse
	(*ResourcexGetContentStreamRequest)(nil),            // 11: nix.ResourcexGetContentStreamRequest
	(*ResourcexGetContentStreamChunk)(nil),              // 12: nix.ResourcexGetContentStreamChunk
	(*StaticWebsiteHealthCheckRequest)(nil),             // 13: nix.StaticWebsiteHealthCheckRequest
	(*StaticWebsiteHealthCheckResponse)(nil),            // 14: nix.StaticWebsiteHealthCheckResponse
	(*StaticWebsitePageListRequest)(nil),                // 15: nix.StaticWebsitePageListRequest
	(*StaticWebsiteInfo)(nil),                           // 16: nix.StaticWebsiteInfo
	(*StaticWebsitePageListResponse)(nil),               // 17: nix.StaticWebsitePageListResponse
	(*StaticWebsiteUploadFileChunk)(nil),                // 18: nix.StaticWebsiteUploadFileChunk
	(*StaticWebsiteUploadFileMetadata)(nil),             // 19: nix.StaticWebsiteUploadFileMetadata
	(*StaticWebsiteUploadFileResponse)(nil),             // 20: nix.StaticWebsiteUploadFileResponse
	(*StaticWebsiteDeleteFileRequest)(nil),              // 21: nix.StaticWebsiteDeleteFileRequest
	(*StaticWebsiteDeleteFileResponse)(nil),             // 22: nix.StaticWebsiteDeleteFileResponse
	(*StaticWebsitePublishRequest)(nil),                 // 23: nix.StaticWebsitePublishRequest
	(*StaticWebsitePublishResponse)(nil),                // 24: nix.StaticWebsitePublishResponse
	(*wrapperspb.StringValue)(nil),                      // 25: google.protobuf.StringValue
}
var file_resourcex_proto_depIdxs = []int32{
	0,  // 0: nix.ResourcexHealthCheckResponse.status:type_name -> nix.ResourcexHealthCheckResponse.ServiceStatus
	6,  // 1: nix.ResourcexUploadFileChunk.metadata:type_name -> nix.ResourcexUploadFileMetadata
	25, // 2: nix.ResourcexUploadFileMetadata.description:type_name -> google.protobuf.StringValue
	25, // 3: nix.ResourcexUploadFileMetadata.downloadFileName:type_name -> google.protobuf.StringValue
	9,  // 4: nix.ResourcexGetContentResponse.info:type_name -> nix.ResourcexInfo
	9,  // 5: nix.ResourcexGetContentStreamChunk.info:type_name -> nix.ResourcexInfo
	1,  // 6: nix.StaticWebsiteHealthCheckResponse.status:type_name -> nix.StaticWebsiteHealthCheckResponse.ServiceStatus
	16, // 7: nix.StaticWebsitePageListResponse.websiteInfo:type_name -> nix.StaticWebsiteInfo
	9,  // 8: nix.StaticWebsitePageListResponse.fileList:type_name -> nix.ResourcexInfo
	19, // 9: nix.StaticWebsiteUploadFileChunk.metadata:type_name -> nix.StaticWebsiteUploadFileMetadata
	25, // 10: nix.StaticWebsiteUploadFileMetadata.description:type_name -> google.protobuf.StringValue
	3,  // 11: nix.Resourcex.ResourcexHealthCheck:input_type -> nix.ResourcexHealthCheckRequest
	5,  // 12: nix.Resourcex.ResourcexUploadFile:input_type -> nix.ResourcexUploadFileChunk
	8,  // 13: nix.Resourcex.ResourcexGetContent:input_type -> nix.ResourcexGetContentRequest
	11, // 14: nix.Resourcex.ResourcexGetContentStream:input_type -> nix.ResourcexGetContentStreamRequest
	13, // 15: nix.StaticWebsite.StaticWebsiteHealthCheck:input_type -> nix.StaticWebsiteHealthCheckRequest
	15, // 16: nix.StaticWebsite.StaticWebsitePageList:input_type -> nix.StaticWebsitePageListRequest
	18, // 17: nix.StaticWebsite.StaticWebsiteUploadFile:input_type -> nix.StaticWebsiteUploadFileChunk
	21, // 18: nix.StaticWebsite.StaticWebsiteDeleteFile:input_type -> nix.StaticWebsiteDeleteFileRequest
	23, // 19: nix.StaticWebsite.StaticWebsitePublish:input_type -> nix.StaticWebsitePublishRequest
	4,  // 20: nix.Resourcex.ResourcexHealthCheck:output_type -> nix.ResourcexHealthCheckResponse
	7,  // 21: nix.Resourcex.ResourcexUploadFile:output_type -> nix.ResourcexUploadFileResponse
	10, // 22: nix.Resourcex.ResourcexGetContent:output_type -> nix.ResourcexGetContentResponse
	12, // 23: nix.Resourcex.ResourcexGetContentStream:output_type -> nix.ResourcexGetContentStreamChunk
	14, // 24: nix.StaticWebsite.StaticWebsiteHealthCheck:output_type -> nix.StaticWebsiteHealthCheckResponse
	17, // 25: nix.StaticWebsite.StaticWebsitePageList:output_type -> nix.StaticWebsitePageListResponse
	20, // 26: nix.StaticWebsite.StaticWebsiteUploadFile:output_type -> nix.StaticWebsiteUploadFileResponse
	22, // 27: nix.StaticWebsite.StaticWebsiteDeleteFile:output_type -> nix.StaticWebsiteDeleteFileResponse
	24, // 28: nix.StaticWebsite.StaticWebsitePublish:output_type -> nix.StaticWebsitePublishResponse
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_resourcex_proto_init() }
func file_resourcex_proto_init() {
	if File_resourcex_proto != nil {
		return
	}
	file_resourcex_proto_msgTypes[3].OneofWrappers = []any{
		(*ResourcexUploadFileChunk_Metadata)(nil),
		(*ResourcexUploadFileChunk_Data)(nil),
	}
	file_resourcex_proto_msgTypes[16].OneofWrappers = []any{
		(*StaticWebsiteUploadFileChunk_Metadata)(nil),
		(*StaticWebsiteUploadFileChunk_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resourcex_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_resourcex_proto_goTypes,
		DependencyIndexes: file_resourcex_proto_depIdxs,
		EnumInfos:         file_resourcex_proto_enumTypes,
		MessageInfos:      file_resourcex_proto_msgTypes,
	}.Build()
	File_resourcex_proto = out.File
	file_resourcex_proto_rawDesc = nil
	file_resourcex_proto_goTypes = nil
	file_resourcex_proto_depIdxs = nil
}
